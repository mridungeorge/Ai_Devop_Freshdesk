pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        ECR_REPOSITORY = 'your-aws-account-id.dkr.ecr.your-region.amazonaws.com'
        KUBECONFIG = credentials('kubeconfig')
        AWS_REGION = 'us-west-2'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh 'docker build -t devops-platform-backend:$BUILD_NUMBER .'
                    sh 'docker tag devops-platform-backend:$BUILD_NUMBER $ECR_REPOSITORY/devops-platform-backend:$BUILD_NUMBER'
                    sh 'docker tag devops-platform-backend:$BUILD_NUMBER $ECR_REPOSITORY/devops-platform-backend:latest'
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'docker build -t devops-platform-frontend:$BUILD_NUMBER .'
                    sh 'docker tag devops-platform-frontend:$BUILD_NUMBER $ECR_REPOSITORY/devops-platform-frontend:$BUILD_NUMBER'
                    sh 'docker tag devops-platform-frontend:$BUILD_NUMBER $ECR_REPOSITORY/devops-platform-frontend:latest'
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                sh '$(aws ecr get-login --no-include-email --region $AWS_REGION)'
                sh 'docker push $ECR_REPOSITORY/devops-platform-backend:$BUILD_NUMBER'
                sh 'docker push $ECR_REPOSITORY/devops-platform-backend:latest'
                sh 'docker push $ECR_REPOSITORY/devops-platform-frontend:$BUILD_NUMBER'
                sh 'docker push $ECR_REPOSITORY/devops-platform-frontend:latest'
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                sh 'export KUBECONFIG=$KUBECONFIG'
                
                // Update image tags in deployment files
                sh "sed -i 's|\${YOUR_REGISTRY}/devops-platform-backend:latest|$ECR_REPOSITORY/devops-platform-backend:$BUILD_NUMBER|g' infra/kubernetes/backend-deployment.yml"
                sh "sed -i 's|\${YOUR_REGISTRY}/devops-platform-frontend:latest|$ECR_REPOSITORY/devops-platform-frontend:$BUILD_NUMBER|g' infra/kubernetes/frontend-deployment.yml"
                
                // Apply Kubernetes manifests
                sh 'kubectl apply -f infra/kubernetes/services.yml'
                sh 'kubectl apply -f infra/kubernetes/backend-deployment.yml'
                sh 'kubectl apply -f infra/kubernetes/frontend-deployment.yml'
                sh 'kubectl apply -f infra/kubernetes/postgres-statefulset.yml'
                sh 'kubectl apply -f infra/kubernetes/prometheus-deployment.yml'
                sh 'kubectl apply -f infra/kubernetes/grafana-deployment.yml'
                sh 'kubectl apply -f infra/kubernetes/ingress.yml'
            }
        }
    }
    
    post {
        always {
            // Clean up local Docker images to save space
            sh 'docker rmi devops-platform-backend:$BUILD_NUMBER || true'
            sh 'docker rmi devops-platform-frontend:$BUILD_NUMBER || true'
            sh 'docker rmi $ECR_REPOSITORY/devops-platform-backend:$BUILD_NUMBER || true'
            sh 'docker rmi $ECR_REPOSITORY/devops-platform-frontend:$BUILD_NUMBER || true'
        }
        
        success {
            echo 'Deployment successful!'
        }
        
        failure {
            echo 'Deployment failed!'
        }
    }
}
